[project]
# SubsCheck-Ubuntu - 基于Sing-box的代理节点测速工具
# 作者: subscheck-ubuntu team
name = "subscheck-ubuntu"
version = "1.0.0"
description = "基于Sing-box的高性能代理节点测速工具，专为Ubuntu VPS优化"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "subscheck-ubuntu team"}
]
maintainers = [
    {name = "subscheck-ubuntu team"}
]
keywords = ["proxy", "speed-test", "sing-box", "vps", "ubuntu", "vmess", "vless", "trojan"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet :: Proxy Servers",
    "Topic :: System :: Networking",
]
requires-python = ">=3.8"
dependencies = [
    "aiohttp>=3.8.0",
    "PyYAML>=6.0",
    "rich>=13.0.0",
    "watchdog>=3.0.0",
    "croniter>=1.3.0",
]

[project.optional-dependencies]
# Web管理界面相关依赖
web = [
    "flask>=2.3.0",
    "gunicorn>=21.0.0",
]
# 开发环境依赖
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]
# 完整安装（包含所有可选依赖）
all = [
    "subscheck-ubuntu[web,dev]"
]

[project.urls]
Homepage = "https://github.com/subscheck-ubuntu/subscheck-ubuntu"
Repository = "https://github.com/subscheck-ubuntu/subscheck-ubuntu"
Issues = "https://github.com/subscheck-ubuntu/subscheck-ubuntu/issues"
Documentation = "https://github.com/subscheck-ubuntu/subscheck-ubuntu/wiki"

[project.scripts]
subscheck = "main:main"
subscheck-ubuntu = "main:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
include = ["*"]
exclude = ["tests*", "docs*", "results*", "logs*"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | results
  | logs
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "aiohttp.*",
    "yaml.*",
    "rich.*",
    "watchdog.*",
    "croniter.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --asyncio-mode=auto"
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "setup.py",
    "venv/*",
    ".venv/*",
    "build/*",
    "dist/*",
    "results/*",
    "logs/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]