# =============================================================================
# SubsCheck-Singbox v3.0 配置文件
# Python+Go混合架构的高性能代理节点测速工具
# =============================================================================

# =============================================================================
# 基本设置
# =============================================================================

# 是否显示进度条和详细日志
print-progress: true

# 并发控制设置
concurrent: 10              # 并发线程数 (建议: 5-20)
success-limit: 0            # 保存几个成功的节点，0代表不限制
timeout: 5000               # 超时时间(毫秒) (建议: 3000-10000)

# 定时检查间隔(分钟)
check-interval: 60          # 设置为0禁用定时检查

# =============================================================================
# 测速配置
# =============================================================================

# 测速URL (使用大文件测速，结果更准确)
speed-test-url: "https://github.com/AaronFeng753/Waifu2x-Extension-GUI/releases/download/v2.21.12/Waifu2x-Extension-GUI-v2.21.12-Portable.7z"

# 测速设置
download-timeout: 10        # 下载测试时间(秒) (建议: 10-30)
download-mb: 20            # 单节点测速下载数据大小(MB)限制，0为不限 (建议: 10-50)
total-speed-limit: 0       # 总下载速度限制(MB/s)，0为不限 (建议: 0 或 10-100)
min-speed: 512             # 最低测速结果舍弃(KB/s) (建议: 256-1024)

# =============================================================================
# 监听端口
# =============================================================================

# HTTP服务器监听端口
listen-port: ":8199"        # 设置为空字符串 ":0" 禁用HTTP服务器

# =============================================================================
# 节点处理设置
# =============================================================================

# 节点重命名
rename-node: true          # 是否重命名节点 (根据地理位置)
node-prefix: ""            # 节点名称前缀 (例如: "[MyProxy]")
keep-success-proxies: false # 保留之前测试成功的节点

# 节点过滤
filter-regex: ""           # 节点名称过滤正则表达式 (例如: "香港|日本|美国")
node-type: []              # 只测试指定协议的节点 (例如: ["vmess", "vless", "ss"])

# =============================================================================
# 流媒体检测
# =============================================================================

# 是否开启流媒体检测
media-check: false         # 开启后会增加测试时间，但可以检测更多平台

# 检测平台列表 (取消注释以启用)
platforms:                 
  # - iprisk               # IP风险检测 (推荐)
  # - youtube              # YouTube区域检测
  # - netflix              # Netflix检测
  # - openai               # OpenAI检测 (ChatGPT)
  # - disney               # Disney+检测
  # - gemini               # Gemini检测
  # - tiktok               # TikTok区域检测

# =============================================================================
# 结果保存设置
# =============================================================================

# 保存方式 (local, gist, webdav, s3, r2)
save-method: "local"       # local:本地文件, gist:GitHub Gist, webdav:WebDAV服务器, s3:S3/MinIO, r2:Cloudflare R2

# 输出目录 (当save-method为local时生效)
output-dir: ""             # 留空则保存到当前目录的results文件夹

# =============================================================================
# Web控制面板
# =============================================================================

# 是否启用Web控制面板
enable-web-ui: false       # 启用后可以通过浏览器查看和管理

# Web控制面板的API密钥 (留空则不需要验证)
api-key: ""               # 建议设置一个复杂的密钥

# =============================================================================
# 重试设置
# =============================================================================

# 订阅重试次数
sub-urls-retry: 3         # 获取订阅失败时的重试次数 (建议: 1-5)

# 订阅成功率阈值
success-rate: 0.3         # 低于此成功率的订阅会发出警告 (0.0-1.0)

# =============================================================================
# 代理设置
# =============================================================================

# GitHub代理 (用于访问GitHub)
github-proxy: ""          # 例如: "https://ghproxy.com/"

# 通用代理设置 (用于访问订阅链接)
proxy: ""                 # 例如: "http://127.0.0.1:7890"

# =============================================================================
# 通知设置
# =============================================================================

# Apprise API服务器 (用于发送通知)
apprise-api-server: ""    # 例如: "http://localhost:8000"

# 通知目标 (支持多种通知方式)
recipient-url: []         # 例如: ["mailto://user@example.com", "telegram://bot_token/chat_id"]

# 通知标题
notify-title: "🔔 节点状态更新"  # 通知的标题

# =============================================================================
# 回调脚本
# =============================================================================

# 检测完成后执行的回调脚本
callback-script: ""       # 例如: "/path/to/script.sh"

# =============================================================================
# SubStore设置
# =============================================================================

# SubStore端口 (为空则不启动)
sub-store-port: ""        # 例如: "25500"

# SubStore路径
sub-store-path: ""        # 例如: "/path/to/substore"

# SubStore同步定时任务
sub-store-sync-cron: ""   # 例如: "0 */6 * * *" (每6小时同步一次)

# SubStore更新订阅定时任务
sub-store-produce-cron: "" # 例如: "0 */12 * * *" (每12小时更新一次)

# SubStore推送服务
sub-store-push-service: "" # 例如: "bark"

# =============================================================================
# Mihomo覆写设置
# =============================================================================

# Mihomo覆写URL
mihomo-overwrite-url: "http://127.0.0.1:8199/sub/ACL4SSR_Online_Full.yaml"

# =============================================================================
# WebDAV设置 (当save-method为webdav时生效)
# =============================================================================

webdav-url: ""            # WebDAV服务器地址 (例如: "https://dav.example.com/dav/")
webdav-username: ""      # WebDAV用户名
webdav-password: ""      # WebDAV密码

# =============================================================================
# GitHub Gist设置 (当save-method为gist时生效)
# =============================================================================

github-gist-id: ""       # Gist ID (例如: "1234567890abcdef1234567890abcdef")
github-token: ""         # GitHub Personal Access Token (需要gist权限)
github-api-mirror: ""    # GitHub API镜像 (例如: "https://api.github.com")

# =============================================================================
# Worker设置
# =============================================================================

worker-url: ""           # Worker服务器地址
worker-token: ""         # Worker访问令牌

# =============================================================================
# S3/Minio设置 (当save-method为s3时生效)
# =============================================================================

s3-endpoint: ""          # S3/Minio服务器地址 (例如: "https://s3.amazonaws.com")
s3-access-id: ""         # S3/Minio访问密钥ID
s3-secret-key: ""        # S3/Minio访问密钥
s3-bucket: ""            # S3/Minio存储桶名称
s3-use-ssl: false        # 是否使用SSL连接
s3-bucket-lookup: "auto" # 存储桶查找方式 (auto, path, dns)

# =============================================================================
# 远程订阅清单
# =============================================================================

# 从远程URL获取订阅列表
sub-urls-remote: []       # 例如: ["https://example.com/subscriptions.json"]

# =============================================================================
# 订阅设置
# =============================================================================

# 订阅链接列表 (支持多个订阅链接)
sub-urls:
  # 示例订阅链接 (请替换为您自己的订阅链接)
  # - "https://example.com/subscription1"
  # - "https://example.com/subscription2"
  
  # 以下为公开测试订阅链接 (可能不稳定，仅供测试)
  - "https://raw.githubusercontent.com/mahdibland/SSAggregator/master/sub/sub_merge.txt"
  - "https://raw.githubusercontent.com/aiboboxx/v2rayfree/main/v2"

# =============================================================================
# 配置说明
# =============================================================================
#
# 1. 基本使用:
#    - 编辑 sub-urls 添加您的订阅链接
#    - 运行 uv run main.py 开始测试
#
# 2. 保存到 GitHub Gist:
#    - 设置 save-method: "gist"
#    - 在 .env 文件中配置 GITHUB_TOKEN 和 GITHUB_GIST_ID
#
# 3. 保存到 WebDAV:
#    - 设置 save-method: "webdav"
#    - 在 .env 文件中配置 WEBDAV_URL, WEBDAV_USERNAME, WEBDAV_PASSWORD
#
# 4. 保存到 S3/MinIO:
#    - 设置 save-method: "s3"
#    - 在 .env 文件中配置 S3_ENDPOINT, S3_ACCESS_ID, S3_SECRET_KEY, S3_BUCKET
#
# 5. 流媒体检测:
#    - 设置 media-check: true
#    - 在 platforms 中取消注释需要检测的平台
#
# 6. 更多帮助:
#    - 运行 uv run main.py --help 查看所有选项
#    - 查看 README.md 获取详细使用说明
#
# =============================================================================